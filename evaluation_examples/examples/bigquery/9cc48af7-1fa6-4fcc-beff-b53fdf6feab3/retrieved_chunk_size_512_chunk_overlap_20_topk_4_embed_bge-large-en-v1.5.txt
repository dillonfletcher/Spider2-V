Documentation Source:
cloud.google.com/bigquery/docs/slots-autoscaling-intro.txt

Documentation Title:
Introduction to slots autoscaling  |  BigQuery  |  Google Cloud

Documentation Content:
renewal or commercial migration). For example:
  +------------------------+------------------+--------------------+--------+------------+--------+-----------+----------------------------+
  |  change_timestamp   | capacity_commitment_id | commitment_plan | state  | slot_count | action | next_plan | next_plan_change_timestamp |
  +---------------------+------------------------+-----------------+--------+------------+--------+-----------+----------------------------+
  | 2023-07-20 19:30:27 | 12954109101902401697   | ANNUAL          | ACTIVE |        100 | CREATE | ANNUAL    |        2023-07-20 19:30:27 |
  | 2023-07-27 22:29:21 | 11445583810276646822   | FLEX            | ACTIVE |        100 | CREATE | FLEX      |        2023-07-27 22:29:21 |
  | 2023-07-27 23:10:06 | 7341455530498381779    | MONTHLY         | ACTIVE |        100 | CREATE | FLEX      |        2023-07-27 23:11:06 |
  | 2023-07-27 23:11:06 | 7341455530498381779    | FLEX            | ACTIVE |        100 | UPDATE | FLEX      |        2023-07-27 23:11:06 |
  */
  commitments_with_next_plan AS (
    SELECT
      *,
      IFNULL(
        LEAD(commitment_plan)
          OVER (
            PARTITION BY capacity_commitment_id ORDER BY change_timestamp ASC
          ),
        commitment_plan)
        next_plan,
      IFNULL(
        LEAD(change_timestamp)
          OVER (
            PARTITION BY capacity_commitment_id ORDER BY change_timestamp ASC
          ),
        change_timestamp)
        next_plan_change_timestamp
    FROM
      `region-us.INFORMATION_SCHEMA.CAPACITY_COMMITMENT_CHANGES_BY_PROJECT`
  ),

  /*
  Insert a 'DELETE' action for those with updated plans.



Documentation Source:
cloud.google.com/bigquery/docs/slots-autoscaling-intro.txt

Documentation Title:
Introduction to slots autoscaling  |  BigQuery  |  Google Cloud

Documentation Content:
For example:
  +---------------------+---------------+
  |  change_timestamp   | capacity_slot |
  +---------------------+---------------+
  | 2023-07-20 19:30:27 |           100 |
  | 2023-07-27 22:29:21 |           200 |
  | 2023-07-27 23:10:06 |           300 |
  */
  running_capacity_commitment_slot_data AS (
    SELECT
      change_timestamp,
      SUM(slot_count_delta)
        OVER (ORDER BY change_timestamp RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
        AS capacity_slot
    FROM
      capacity_commitment_slot_data
  ),

  /* Add next_change_timestamp to the above data,
   which will be used when joining with reservation data. For example:
  +---------------------+-----------------------+---------------+
  |  change_timestamp   | next_change_timestamp | capacity_slot |
  +---------------------+-----------------------+---------------+
  | 2023-07-20 19:30:27 |   2023-07-27 22:29:21 |           100 |
  | 2023-07-27 22:29:21 |   2023-07-27 23:10:06 |           200 |
  | 2023-07-27 23:10:06 |   2023-07-31 00:14:37 |           300 |
  */
  running_capacity_commitment_slot_data_with_next_change AS (
    SELECT
      change_timestamp,
      IFNULL(LEAD(change_timestamp) OVER (ORDER BY change_timestamp ASC), CURRENT_TIMESTAMP())
        AS next_change_timestamp,
      capacity_slot
    FROM
      running_capacity_commitment_slot_data
  ),

  /*
  Whenever we have a change in reservations or commitments,
  the scaled_slots_and_baseline_not_covered_by_commitments will be changed.
  Hence we get a collection of all the change_timestamp from both tables.



Documentation Source:
cloud.google.com/bigquery/docs/reference/standard-sql/window-function-calls.txt

Documentation Title:
Window function calls  |  BigQuery  |  Google Cloud

Documentation Content:
The upper boundary is 1 row after the current row.
(
banana
,
leek
, apple, cabbage, lettuce, kale) = 2 average purchases
(
banana
,
leek
,
apple
, cabbage, lettuce, kale) = 4 average purchases
(banana,
leek
,
apple
,
cabbage
, lettuce, kale) = 6.3333 average purchases
(banana, leek,
apple
,
cabbage
,
lettuce
, kale) = 9 average purchases
(banana, leek, apple,
cabbage
,
lettuce
,
kale
) = 14 average purchases
(banana, leek, apple, cabbage,
lettuce
,
kale
) = 16.5 average purchases
SELECT item, purchases, category, AVG(purchases)
  OVER (
    ORDER BY purchases
    ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING
  ) AS avg_purchases
FROM Produce

/*-------------------------------------------------------*
 | item      | purchases  | category   | avg_purchases   |
 +-------------------------------------------------------+
 | banana    | 2          | fruit      | 2               |
 | leek      | 2          | vegetable  | 4               |
 | apple     | 8          | fruit      | 6.33333         |
 | cabbage   | 9          | vegetable  | 9               |
 | lettuce   | 10         | vegetable  | 14              |
 | kale      | 23         | vegetable  | 16.5            |
 *-------------------------------------------------------*/
Compute the number of items within a range
This example gets the number of animals that have a similar population
count in the
Farm
table.
(
goose
,
dog
,
ox
,
goat
, duck, cat) = 4 animals between population range 0-2.
(
goose
,
dog
,
ox
,
goat
,
duck
, cat) = 5 animals between population range 1-3.
(
goose
,
dog
,
ox
,
goat
,
duck
, cat) = 5 animals between population range 1-3.



Documentation Source:
cloud.google.com/bigquery/docs/information-schema-table-storage-usage.txt

Documentation Title:
TABLE_STORAGE_USAGE_TIMELINE view  |  BigQuery  |  Google Cloud

Documentation Content:
SELECT
  usage_date,
  table_schema,
  table_name,
  billable_total_physical_usage
FROM
  (
    SELECT
      *,
      ROW_NUMBER()
        OVER (PARTITION BY project_id, table_schema, table_name ORDER BY usage_date DESC) AS rank
    FROM
      `region-
REGION
`.INFORMATION_SCHEMA.TABLE_STORAGE_USAGE_TIMELINE
  )
WHERE
  rank = 1
  AND project_id = '
PROJECT_ID
'
  AND table_schema ='
DATASET_NAME
'
ORDER BY
  usage_date;
The result is similar to the following:
+--------------+--------------+------------+-------------------------------+
| usage_date   | table_schema | table_name | billable_total_physical_usage |
+--------------+--------------+------------+-------------------------------+
|  2023-04-12  | dataset_A    | table_4    |  345788341123                 |
+--------------+--------------+------------+-------------------------------+
|  2023-04-12  | dataset_A    | table_1    |             0                 |
+--------------+--------------+------------+-------------------------------+
|  2023-04-12  | dataset_A    | table_3    | 9123481400212                 |
+--------------+--------------+------------+-------------------------------+
|  2023-04-12  | dataset_A    | table_2    |    1451334553                 |
+--------------+--------------+------------+-------------------------------+
Send feedback
Except as otherwise noted, the content of this page is licensed under the
Creative Commons Attribution 4.0 License
, and code samples are licensed under the
Apache 2.0 License
. For details, see the
Google Developers Site Policies
. Java is a registered trademark of Oracle and/or its affiliates.
Last updated 2024-05-13 UTC.



